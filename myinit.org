#+STARTIP: overview
* Interface tweaks
#+begin_src emacs-lisp
(setq inhibit-startup-message t)	; Desabilita tela inicial do emacs
(defalias 'yes-or-no-p 'y-or-n-p)	; Transforma yes e no para 'y' e 'n'
;(set-fringe-mode 0)			; elimina as "franjas" nas bordas direita e esquerdas da tela
(scroll-bar-mode -1)		        ; eliminar scroll bars
;; (set-background-color "#FFFFFF")	; configura fundo de tela branco
(tool-bar-mode -1)			; remove a barra de ferramentas
#+end_src

* Try
#+begin_src emacs-lisp
(use-package try
  :ensure t)
#+end_src

* Which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+end_src

* Bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

* Neotree
#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :bind ("<f8>" . neotree-toggle))
#+end_src

* Markdown-mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+end_src

* Ido
#+begin_src emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+end_src

* Ibuffer
#+begin_src emacs-lisp
(defalias 'list-buffers 'ibuffer-evil)
#+end_src

* Ace Window (/desabilitado/)
#+begin_src 
;; (use-package ace-window
;;   :ensure t
;;   :init
;;   (progn 
;;     (global-set-key [remap other-window] 'ace-window)
;;     (custom-set-faces
;;      '(aw-leading-char-face
;;        ((t (:inherit ace-jump-face-foreground :height 3.0))))
;;     ))
#+end_src

* Counsel e Swiper
#+begin_src emacs-lisp
(use-package counsel
	:ensure t
	)

(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    ))
#+end_src

* Avy
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+end_src

* Auto-Complete
#+begin_src emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+end_src

* Cores
#+begin_src emacs-lisp
  ;; Pacote para temas de cores
  (use-package color-theme-modern
    :ensure t)

  ;; Seleciona tema
  ;; (load-theme 'raspopovic t t)
  ;; (enable-theme 'raspopovic)

  ;; (use-package zenburn-theme
  ;;   :ensure t
  ;;   :config (load-theme 'zenburn))

  (use-package moe-theme
    :ensure t)
  (moe-light)
#+end_src

* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+end_src

* Jedi (/desabilitado/)
#+begin_src emacs-lisp
  ;; (use-package jedi
  ;;   :ensure t
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'jedi:setup)
  ;;   (add-hook 'python-mode-hook 'jedi:ac-setup))
#+end_src
* Yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
      (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+end_src
* Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
       :ensure
       :init
       (global-undo-tree-mode))

  ;; Prevent undo tree files from polluting your git repo
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src
* Misc Packages
#+begin_src emacs-lisp
  (global-hl-line-mode t)
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    ;; (setq beacon-color "#666000")
    )
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
  (use-package iedit
    :ensure t)

  ;; Evita a criação de vários arquivos temporários e de lock
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
  (setq create-lockfiles nil)

  ;; Configura arquivo principal de agenda para org-mode
  (setq org-agenda-files (list "~/Sync/org-mode/agenda.org"))

  ;; Scroll de uma única linha
  (setq scroll-conservatively most-positive-fixnum)
#+end_src
* Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
	  '(("django" . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
	  '(("css"  . (ac-source-css-property))
	    ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-ebanle-auto-closing t))
#+end_src
* GGTags
  - Antes de usar o ggtags é necessário instalar os pacotes global e exuberant-ctags
#+begin_src emacs-lisp
  (use-package ggtags
  :ensure t
  :config 
  (add-hook 'c-mode-common-hook
	    (lambda ()
	      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		(ggtags-mode 1))))
  )
#+end_src
* Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src

